"""Add my_team_id and my_team_name to fantrax_leagues

Revision ID: c67ca5c732c0
Revises: 0c9d5a8edc04
Create Date: 2025-10-16 22:38:16.101181

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c67ca5c732c0'
down_revision = '0c9d5a8edc04'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_prospect_views',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('prospect_id', sa.Integer(), nullable=False),
    sa.Column('viewed_at', sa.DateTime(), nullable=False),
    sa.Column('view_duration', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['prospect_id'], ['prospects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_prospect_views_id'), 'user_prospect_views', ['id'], unique=False)
    op.create_table('user_push_subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('endpoint', sa.String(length=512), nullable=False),
    sa.Column('p256dh_key', sa.String(length=255), nullable=False),
    sa.Column('auth_key', sa.String(length=255), nullable=False),
    sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('endpoint')
    )
    op.create_index(op.f('ix_user_push_subscriptions_id'), 'user_push_subscriptions', ['id'], unique=False)
    op.create_table('user_saved_searches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('search_name', sa.String(length=100), nullable=False),
    sa.Column('search_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_used', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_saved_searches_id'), 'user_saved_searches', ['id'], unique=False)
    op.create_table('user_search_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('search_query', sa.Text(), nullable=True),
    sa.Column('search_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('results_count', sa.Integer(), nullable=True),
    sa.Column('searched_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_search_history_id'), 'user_search_history', ['id'], unique=False)
    op.drop_index(op.f('idx_position_factors_season_level_pos'), table_name='milb_position_factors')
    op.drop_table('milb_position_factors')
    op.drop_index(op.f('idx_batter_pitches_batter'), table_name='milb_batter_pitches')
    op.drop_index(op.f('idx_batter_pitches_batter_season'), table_name='milb_batter_pitches')
    op.drop_index(op.f('idx_batter_pitches_game'), table_name='milb_batter_pitches')
    op.drop_index(op.f('idx_batter_pitches_launch'), table_name='milb_batter_pitches', postgresql_where='(launch_speed IS NOT NULL)')
    op.drop_index(op.f('idx_batter_pitches_season'), table_name='milb_batter_pitches')
    op.drop_index(op.f('idx_batter_pitches_type'), table_name='milb_batter_pitches', postgresql_where='(pitch_type IS NOT NULL)')
    op.drop_index(op.f('idx_batter_pitches_velocity'), table_name='milb_batter_pitches', postgresql_where='(start_speed IS NOT NULL)')
    op.drop_table('milb_batter_pitches')
    op.drop_index(op.f('idx_ml_features_prospect'), table_name='ml_features')
    op.drop_index(op.f('idx_ml_features_vector'), table_name='ml_features', postgresql_using='gin')
    op.drop_index(op.f('idx_ml_features_version'), table_name='ml_features')
    op.drop_index(op.f('idx_ml_features_year'), table_name='ml_features')
    op.drop_table('ml_features')
    op.drop_index(op.f('idx_mlb_statcast_pitching_date'), table_name='mlb_statcast_pitching')
    op.drop_index(op.f('idx_mlb_statcast_pitching_player'), table_name='mlb_statcast_pitching')
    op.drop_table('mlb_statcast_pitching')
    op.drop_index(op.f('idx_milb_pa_launch_speed'), table_name='milb_plate_appearances', postgresql_where='(launch_speed IS NOT NULL)')
    op.drop_index(op.f('idx_milb_pa_player'), table_name='milb_plate_appearances')
    op.drop_table('milb_plate_appearances')
    op.drop_index(op.f('idx_pitcher_pitches_game'), table_name='milb_pitcher_pitches')
    op.drop_index(op.f('idx_pitcher_pitches_launch'), table_name='milb_pitcher_pitches', postgresql_where='(launch_speed IS NOT NULL)')
    op.drop_index(op.f('idx_pitcher_pitches_pitcher'), table_name='milb_pitcher_pitches')
    op.drop_index(op.f('idx_pitcher_pitches_pitcher_season'), table_name='milb_pitcher_pitches')
    op.drop_index(op.f('idx_pitcher_pitches_season'), table_name='milb_pitcher_pitches')
    op.drop_index(op.f('idx_pitcher_pitches_type'), table_name='milb_pitcher_pitches', postgresql_where='(pitch_type IS NOT NULL)')
    op.drop_index(op.f('idx_pitcher_pitches_velocity'), table_name='milb_pitcher_pitches', postgresql_where='(start_speed IS NOT NULL)')
    op.drop_table('milb_pitcher_pitches')
    op.drop_index(op.f('ix_player_hype_player_id'), table_name='player_hype')
    op.drop_table('player_hype')
    op.drop_table('social_mentions')
    op.drop_index(op.f('idx_mlb_statcast_hitting_date'), table_name='mlb_statcast_hitting')
    op.drop_index(op.f('idx_mlb_statcast_hitting_player'), table_name='mlb_statcast_hitting')
    op.drop_table('mlb_statcast_hitting')
    op.drop_table('milb_players')
    op.drop_index(op.f('idx_statcast_metrics_player'), table_name='milb_statcast_metrics')
    op.drop_table('milb_statcast_metrics')
    op.drop_index(op.f('idx_mlb_logs_date'), table_name='mlb_game_logs')
    op.drop_index(op.f('idx_mlb_logs_player'), table_name='mlb_game_logs')
    op.drop_index(op.f('idx_mlb_logs_season'), table_name='mlb_game_logs')
    op.drop_table('mlb_game_logs')
    op.drop_index(op.f('ix_hype_alerts_player_id'), table_name='hype_alerts')
    op.drop_table('hype_alerts')
    op.drop_index(op.f('idx_league_factors_season_level'), table_name='milb_league_factors')
    op.drop_table('milb_league_factors')
    op.drop_index(op.f('ix_search_trends_id'), table_name='search_trends')
    op.drop_table('search_trends')
    op.drop_index(op.f('idx_milb_advanced_prospect'), table_name='milb_advanced_stats')
    op.drop_index(op.f('idx_milb_advanced_season'), table_name='milb_advanced_stats')
    op.drop_table('milb_advanced_stats')
    op.drop_table('player_id_mapping')
    op.drop_index(op.f('idx_milb_game_logs_game_pk'), table_name='milb_game_logs')
    op.drop_index(op.f('idx_milb_game_logs_mlb_player'), table_name='milb_game_logs')
    op.drop_index(op.f('idx_milb_logs_date'), table_name='milb_game_logs')
    op.drop_index(op.f('idx_milb_logs_prospect_date'), table_name='milb_game_logs')
    op.drop_index(op.f('idx_milb_logs_prospect_id'), table_name='milb_game_logs')
    op.drop_index(op.f('idx_milb_logs_prospect_season'), table_name='milb_game_logs')
    op.drop_index(op.f('idx_milb_logs_season_level'), table_name='milb_game_logs')
    op.drop_table('milb_game_logs')
    op.drop_table('media_articles')
    op.drop_table('prospect_rankings_context_aware')
    op.drop_table('fangraphs_mlb_linkage')
    op.drop_table('fangraphs_unified_grades')
    op.drop_table('hype_history')
    op.drop_index(op.f('ix_trending_topics_player_id'), table_name='trending_topics')
    op.drop_table('trending_topics')
    op.drop_index(op.f('idx_mlb_stats_prospect'), table_name='mlb_stats')
    op.drop_index(op.f('idx_mlb_stats_season'), table_name='mlb_stats')
    op.drop_table('mlb_stats')
    op.drop_table('fangraphs_prospect_grades')
    op.drop_table('milb_statcast_metrics_imputed')
    op.drop_table('fangraphs_mlb_mapping')
    op.drop_table('prospect_rankings_v7')
    op.drop_index(op.f('idx_ml_labels_prospect'), table_name='ml_labels')
    op.drop_index(op.f('idx_ml_labels_success'), table_name='ml_labels')
    op.drop_index(op.f('idx_ml_labels_year'), table_name='ml_labels')
    op.drop_table('ml_labels')
    op.drop_constraint(op.f('analytics_events_user_id_fkey'), 'analytics_events', type_='foreignkey')
    op.create_foreign_key(None, 'analytics_events', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('email_preferences_user_id_key'), 'email_preferences', type_='unique')
    op.drop_constraint(op.f('email_preferences_user_id_fkey'), 'email_preferences', type_='foreignkey')
    op.create_foreign_key(None, 'email_preferences', 'users', ['user_id'], ['id'])
    op.add_column('fantrax_leagues', sa.Column('my_team_id', sa.String(length=100), nullable=True))
    op.add_column('fantrax_leagues', sa.Column('my_team_name', sa.String(length=200), nullable=True))
    op.drop_constraint(op.f('fantrax_leagues_user_id_fkey'), 'fantrax_leagues', type_='foreignkey')
    op.create_foreign_key(None, 'fantrax_leagues', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_fantrax_rosters_positions_gin'), table_name='fantrax_rosters', postgresql_ops={'positions': 'jsonb_path_ops'}, postgresql_using='gin')
    op.drop_constraint(op.f('fantrax_rosters_league_id_fkey'), 'fantrax_rosters', type_='foreignkey')
    op.create_foreign_key(None, 'fantrax_rosters', 'fantrax_leagues', ['league_id'], ['id'])
    op.drop_constraint(op.f('fantrax_sync_history_league_id_fkey'), 'fantrax_sync_history', type_='foreignkey')
    op.create_foreign_key(None, 'fantrax_sync_history', 'fantrax_leagues', ['league_id'], ['id'])
    op.drop_constraint(op.f('feedback_user_id_fkey'), 'feedback', type_='foreignkey')
    op.create_foreign_key(None, 'feedback', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('invoices_stripe_invoice_id_key'), 'invoices', type_='unique')
    op.drop_index(op.f('ix_invoices_user_id'), table_name='invoices')
    op.alter_column('ml_predictions', 'prediction_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('ml_predictions', 'prediction_value',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.drop_index(op.f('idx_predictions_model'), table_name='ml_predictions')
    op.drop_index(op.f('idx_predictions_prospect'), table_name='ml_predictions')
    op.drop_index(op.f('ix_ml_predictions_prospect_id'), table_name='ml_predictions')
    op.drop_column('ml_predictions', 'predicted_fv')
    op.drop_column('ml_predictions', 'predicted_tier')
    op.drop_column('ml_predictions', 'prediction_date')
    op.drop_index(op.f('idx_payment_audit_action'), table_name='payment_audit_logs')
    op.drop_index(op.f('idx_payment_audit_created_at'), table_name='payment_audit_logs')
    op.drop_index(op.f('idx_payment_audit_user_id'), table_name='payment_audit_logs')
    op.drop_index(op.f('ix_payment_methods_user_id'), table_name='payment_methods')
    op.drop_index(op.f('ix_prospect_stats_prospect_date'), table_name='prospect_stats')
    op.drop_index(op.f('ix_prospect_stats_prospect_season'), table_name='prospect_stats')
    op.drop_index(op.f('ix_prospect_stats_season'), table_name='prospect_stats')
    op.alter_column('prospects', 'mlb_id',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
    op.drop_index(op.f('idx_prospects_fg_player_id'), table_name='prospects')
    op.drop_index(op.f('idx_prospects_mlb_id'), table_name='prospects')
    op.drop_index(op.f('idx_prospects_name'), table_name='prospects')
    op.drop_index(op.f('idx_prospects_position'), table_name='prospects')
    op.drop_index(op.f('ix_prospects_eta_year'), table_name='prospects')
    op.drop_index(op.f('ix_prospects_org_position'), table_name='prospects')
    op.drop_index(op.f('ix_prospects_organization'), table_name='prospects')
    op.drop_index(op.f('ix_prospects_position'), table_name='prospects')
    op.drop_constraint(op.f('prospects_mlb_id_key'), 'prospects', type_='unique')
    op.create_index(op.f('ix_prospects_mlb_player_id'), 'prospects', ['mlb_player_id'], unique=False)
    op.drop_column('prospects', 'current_level')
    op.drop_column('prospects', 'draft_pick')
    op.drop_column('prospects', 'fg_player_id')
    op.drop_column('prospects', 'draft_round')
    op.drop_column('prospects', 'draft_team')
    op.drop_column('prospects', 'throws')
    op.drop_column('prospects', 'birth_country')
    op.drop_column('prospects', 'current_organization')
    op.drop_column('prospects', 'mlb_debut_date')
    op.drop_column('prospects', 'birth_date')
    op.drop_column('prospects', 'ba_player_id')
    op.drop_column('prospects', 'data_sources')
    op.drop_column('prospects', 'bats')
    op.drop_column('prospects', 'draft_year')
    op.drop_column('prospects', 'signing_bonus_usd')
    op.drop_column('prospects', 'birth_city')
    op.drop_column('prospects', 'last_stats_update')
    op.drop_column('prospects', 'weight_lbs')
    op.drop_column('prospects', 'fg_prospect_id')
    op.drop_column('prospects', 'height_inches')
    op.drop_column('prospects', 'current_team')
    op.drop_constraint(op.f('recommendation_feedback_recommendation_id_fkey'), 'recommendation_feedback', type_='foreignkey')
    op.drop_constraint(op.f('recommendation_feedback_user_id_fkey'), 'recommendation_feedback', type_='foreignkey')
    op.create_foreign_key(None, 'recommendation_feedback', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'recommendation_feedback', 'recommendation_history', ['recommendation_id'], ['id'])
    op.drop_constraint(op.f('recommendation_history_user_id_fkey'), 'recommendation_history', type_='foreignkey')
    op.drop_constraint(op.f('recommendation_history_league_id_fkey'), 'recommendation_history', type_='foreignkey')
    op.drop_constraint(op.f('recommendation_history_prospect_id_fkey'), 'recommendation_history', type_='foreignkey')
    op.create_foreign_key(None, 'recommendation_history', 'fantrax_leagues', ['league_id'], ['id'])
    op.create_foreign_key(None, 'recommendation_history', 'prospects', ['prospect_id'], ['id'])
    op.create_foreign_key(None, 'recommendation_history', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('referral_codes_code_key'), 'referral_codes', type_='unique')
    op.drop_constraint(op.f('referral_codes_user_id_fkey'), 'referral_codes', type_='foreignkey')
    op.create_foreign_key(None, 'referral_codes', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('referrals_referred_user_id_fkey'), 'referrals', type_='foreignkey')
    op.drop_constraint(op.f('referrals_referrer_id_fkey'), 'referrals', type_='foreignkey')
    op.create_foreign_key(None, 'referrals', 'users', ['referred_user_id'], ['id'])
    op.create_foreign_key(None, 'referrals', 'users', ['referrer_id'], ['id'])
    op.drop_index(op.f('idx_scouting_fv'), table_name='scouting_grades')
    op.drop_index(op.f('idx_scouting_prospect'), table_name='scouting_grades')
    op.drop_index(op.f('ix_scouting_grades_prospect_id'), table_name='scouting_grades')
    op.drop_index(op.f('ix_scouting_grades_prospect_source'), table_name='scouting_grades')
    op.drop_index(op.f('ix_scouting_grades_source_updated'), table_name='scouting_grades')
    op.drop_column('scouting_grades', 'command_grade')
    op.drop_column('scouting_grades', 'redraft_rank')
    op.drop_column('scouting_grades', 'field_future')
    op.drop_column('scouting_grades', 'slider_grade')
    op.drop_column('scouting_grades', 'curveball_grade')
    op.drop_column('scouting_grades', 'arm_present')
    op.drop_column('scouting_grades', 'raw_power_future')
    op.drop_column('scouting_grades', 'dynasty_rank')
    op.drop_column('scouting_grades', 'field_present')
    op.drop_column('scouting_grades', 'date_recorded')
    op.drop_column('scouting_grades', 'eta_season')
    op.drop_column('scouting_grades', 'changeup_grade')
    op.drop_column('scouting_grades', 'speed_present')
    op.drop_column('scouting_grades', 'arm_future')
    op.drop_column('scouting_grades', 'power_future')
    op.drop_column('scouting_grades', 'speed_future')
    op.drop_column('scouting_grades', 'hit_future')
    op.drop_column('scouting_grades', 'fastball_grade')
    op.drop_column('scouting_grades', 'risk_level')
    op.drop_column('scouting_grades', 'control_grade')
    op.drop_column('scouting_grades', 'scouting_report')
    op.drop_column('scouting_grades', 'hit_present')
    op.drop_column('scouting_grades', 'eta_year')
    op.drop_column('scouting_grades', 'raw_power_present')
    op.drop_column('scouting_grades', 'power_present')
    op.drop_column('scouting_grades', 'rank_overall')
    op.drop_column('scouting_grades', 'ranking_year')
    op.add_column('subscription_events', sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_index(op.f('idx_subscription_events_created_at'), table_name='subscription_events')
    op.drop_index(op.f('idx_subscription_events_event_type'), table_name='subscription_events')
    op.drop_index(op.f('idx_subscription_events_subscription_id'), table_name='subscription_events')
    op.drop_column('subscription_events', 'metadata')
    op.drop_index(op.f('ix_subscriptions_user_id'), table_name='subscriptions')
    op.drop_constraint(op.f('subscriptions_stripe_subscription_id_key'), 'subscriptions', type_='unique')
    op.drop_constraint(op.f('uq_user_achievement'), 'user_achievements', type_='unique')
    op.create_index('uq_user_achievement', 'user_achievements', ['user_id', 'achievement_id'], unique=True)
    op.drop_constraint(op.f('user_achievements_achievement_id_fkey'), 'user_achievements', type_='foreignkey')
    op.drop_constraint(op.f('user_achievements_user_id_fkey'), 'user_achievements', type_='foreignkey')
    op.create_foreign_key(None, 'user_achievements', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'user_achievements', 'achievements', ['achievement_id'], ['id'])
    op.drop_constraint(op.f('user_engagement_metrics_user_id_key'), 'user_engagement_metrics', type_='unique')
    op.drop_constraint(op.f('user_engagement_metrics_user_id_fkey'), 'user_engagement_metrics', type_='foreignkey')
    op.create_foreign_key(None, 'user_engagement_metrics', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_user_lineups_type'), table_name='user_lineups')
    op.create_index(op.f('ix_user_lineups_lineup_type'), 'user_lineups', ['lineup_type'], unique=False)
    op.drop_constraint(op.f('user_recommendation_preferences_user_id_fkey'), 'user_recommendation_preferences', type_='foreignkey')
    op.create_foreign_key(None, 'user_recommendation_preferences', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_onboarding_completed'), table_name='users')
    op.drop_index(op.f('ix_users_subscription_tier'), table_name='users')
    op.create_unique_constraint(None, 'users', ['google_id'])
    op.drop_constraint(op.f('uq_user_prospect_watchlist'), 'watchlists', type_='unique')
    op.create_index('uq_user_prospect_watchlist', 'watchlists', ['user_id', 'prospect_id'], unique=True)
    op.create_index(op.f('ix_watchlists_id'), 'watchlists', ['id'], unique=False)
    op.drop_constraint(op.f('watchlists_prospect_id_fkey'), 'watchlists', type_='foreignkey')
    op.drop_constraint(op.f('watchlists_user_id_fkey'), 'watchlists', type_='foreignkey')
    op.create_foreign_key(None, 'watchlists', 'prospects', ['prospect_id'], ['id'])
    op.create_foreign_key(None, 'watchlists', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'watchlists', type_='foreignkey')
    op.drop_constraint(None, 'watchlists', type_='foreignkey')
    op.create_foreign_key(op.f('watchlists_user_id_fkey'), 'watchlists', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('watchlists_prospect_id_fkey'), 'watchlists', 'prospects', ['prospect_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_watchlists_id'), table_name='watchlists')
    op.drop_index('uq_user_prospect_watchlist', table_name='watchlists')
    op.create_unique_constraint(op.f('uq_user_prospect_watchlist'), 'watchlists', ['user_id', 'prospect_id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index(op.f('ix_users_subscription_tier'), 'users', ['subscription_tier'], unique=False)
    op.create_index(op.f('ix_users_onboarding_completed'), 'users', ['onboarding_completed'], unique=False)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=True)
    op.drop_constraint(None, 'user_recommendation_preferences', type_='foreignkey')
    op.create_foreign_key(op.f('user_recommendation_preferences_user_id_fkey'), 'user_recommendation_preferences', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_user_lineups_lineup_type'), table_name='user_lineups')
    op.create_index(op.f('ix_user_lineups_type'), 'user_lineups', ['lineup_type'], unique=False)
    op.drop_constraint(None, 'user_engagement_metrics', type_='foreignkey')
    op.create_foreign_key(op.f('user_engagement_metrics_user_id_fkey'), 'user_engagement_metrics', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('user_engagement_metrics_user_id_key'), 'user_engagement_metrics', ['user_id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'user_achievements', type_='foreignkey')
    op.drop_constraint(None, 'user_achievements', type_='foreignkey')
    op.create_foreign_key(op.f('user_achievements_user_id_fkey'), 'user_achievements', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('user_achievements_achievement_id_fkey'), 'user_achievements', 'achievements', ['achievement_id'], ['id'], ondelete='CASCADE')
    op.drop_index('uq_user_achievement', table_name='user_achievements')
    op.create_unique_constraint(op.f('uq_user_achievement'), 'user_achievements', ['user_id', 'achievement_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('subscriptions_stripe_subscription_id_key'), 'subscriptions', ['stripe_subscription_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_subscriptions_user_id'), 'subscriptions', ['user_id'], unique=True)
    op.add_column('subscription_events', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_subscription_events_subscription_id'), 'subscription_events', ['subscription_id'], unique=False)
    op.create_index(op.f('idx_subscription_events_event_type'), 'subscription_events', ['event_type'], unique=False)
    op.create_index(op.f('idx_subscription_events_created_at'), 'subscription_events', ['created_at'], unique=False)
    op.drop_column('subscription_events', 'event_metadata')
    op.add_column('scouting_grades', sa.Column('ranking_year', sa.INTEGER(), server_default=sa.text('2024'), autoincrement=False, nullable=False))
    op.add_column('scouting_grades', sa.Column('rank_overall', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('power_present', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('raw_power_present', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('eta_year', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('hit_present', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('scouting_report', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('control_grade', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('risk_level', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('fastball_grade', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('hit_future', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('speed_future', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('power_future', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('arm_future', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('speed_present', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('changeup_grade', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('eta_season', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('date_recorded', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False))
    op.add_column('scouting_grades', sa.Column('field_present', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('dynasty_rank', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('raw_power_future', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('arm_present', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('curveball_grade', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('slider_grade', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('field_future', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('redraft_rank', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('scouting_grades', sa.Column('command_grade', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_scouting_grades_source_updated'), 'scouting_grades', ['source', 'updated_at'], unique=False)
    op.create_index(op.f('ix_scouting_grades_prospect_source'), 'scouting_grades', ['prospect_id', 'source'], unique=False)
    op.create_index(op.f('ix_scouting_grades_prospect_id'), 'scouting_grades', ['prospect_id'], unique=False)
    op.create_index(op.f('idx_scouting_prospect'), 'scouting_grades', ['prospect_id'], unique=False)
    op.create_index(op.f('idx_scouting_fv'), 'scouting_grades', ['future_value'], unique=False)
    op.drop_constraint(None, 'referrals', type_='foreignkey')
    op.drop_constraint(None, 'referrals', type_='foreignkey')
    op.create_foreign_key(op.f('referrals_referrer_id_fkey'), 'referrals', 'users', ['referrer_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('referrals_referred_user_id_fkey'), 'referrals', 'users', ['referred_user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'referral_codes', type_='foreignkey')
    op.create_foreign_key(op.f('referral_codes_user_id_fkey'), 'referral_codes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('referral_codes_code_key'), 'referral_codes', ['code'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'recommendation_history', type_='foreignkey')
    op.drop_constraint(None, 'recommendation_history', type_='foreignkey')
    op.drop_constraint(None, 'recommendation_history', type_='foreignkey')
    op.create_foreign_key(op.f('recommendation_history_prospect_id_fkey'), 'recommendation_history', 'prospects', ['prospect_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('recommendation_history_league_id_fkey'), 'recommendation_history', 'fantrax_leagues', ['league_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('recommendation_history_user_id_fkey'), 'recommendation_history', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'recommendation_feedback', type_='foreignkey')
    op.drop_constraint(None, 'recommendation_feedback', type_='foreignkey')
    op.create_foreign_key(op.f('recommendation_feedback_user_id_fkey'), 'recommendation_feedback', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('recommendation_feedback_recommendation_id_fkey'), 'recommendation_feedback', 'recommendation_history', ['recommendation_id'], ['id'], ondelete='CASCADE')
    op.add_column('prospects', sa.Column('current_team', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('height_inches', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('fg_prospect_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('weight_lbs', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('last_stats_update', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('birth_city', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('signing_bonus_usd', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('draft_year', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('bats', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('data_sources', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('ba_player_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('birth_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('mlb_debut_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('current_organization', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('birth_country', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('throws', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('draft_team', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('draft_round', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('fg_player_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('draft_pick', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('prospects', sa.Column('current_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_prospects_mlb_player_id'), table_name='prospects')
    op.create_unique_constraint(op.f('prospects_mlb_id_key'), 'prospects', ['mlb_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_prospects_position'), 'prospects', ['position'], unique=False)
    op.create_index(op.f('ix_prospects_organization'), 'prospects', ['organization'], unique=False)
    op.create_index(op.f('ix_prospects_org_position'), 'prospects', ['organization', 'position'], unique=False)
    op.create_index(op.f('ix_prospects_eta_year'), 'prospects', ['eta_year'], unique=False)
    op.create_index(op.f('idx_prospects_position'), 'prospects', ['position'], unique=False)
    op.create_index(op.f('idx_prospects_name'), 'prospects', ['name'], unique=False)
    op.create_index(op.f('idx_prospects_mlb_id'), 'prospects', ['mlb_id'], unique=False)
    op.create_index(op.f('idx_prospects_fg_player_id'), 'prospects', ['fg_player_id'], unique=False)
    op.alter_column('prospects', 'mlb_id',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.create_index(op.f('ix_prospect_stats_season'), 'prospect_stats', ['season'], unique=False)
    op.create_index(op.f('ix_prospect_stats_prospect_season'), 'prospect_stats', ['prospect_id', 'season'], unique=False)
    op.create_index(op.f('ix_prospect_stats_prospect_date'), 'prospect_stats', ['prospect_id', 'date_recorded'], unique=False)
    op.create_index(op.f('ix_payment_methods_user_id'), 'payment_methods', ['user_id'], unique=False)
    op.create_index(op.f('idx_payment_audit_user_id'), 'payment_audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('idx_payment_audit_created_at'), 'payment_audit_logs', ['created_at'], unique=False)
    op.create_index(op.f('idx_payment_audit_action'), 'payment_audit_logs', ['action'], unique=False)
    op.add_column('ml_predictions', sa.Column('prediction_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('ml_predictions', sa.Column('predicted_tier', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('ml_predictions', sa.Column('predicted_fv', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_ml_predictions_prospect_id'), 'ml_predictions', ['prospect_id'], unique=False)
    op.create_index(op.f('idx_predictions_prospect'), 'ml_predictions', ['prospect_id'], unique=False)
    op.create_index(op.f('idx_predictions_model'), 'ml_predictions', ['model_version'], unique=False)
    op.alter_column('ml_predictions', 'prediction_value',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('ml_predictions', 'prediction_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.create_index(op.f('ix_invoices_user_id'), 'invoices', ['user_id'], unique=False)
    op.create_unique_constraint(op.f('invoices_stripe_invoice_id_key'), 'invoices', ['stripe_invoice_id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'feedback', type_='foreignkey')
    op.create_foreign_key(op.f('feedback_user_id_fkey'), 'feedback', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'fantrax_sync_history', type_='foreignkey')
    op.create_foreign_key(op.f('fantrax_sync_history_league_id_fkey'), 'fantrax_sync_history', 'fantrax_leagues', ['league_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'fantrax_rosters', type_='foreignkey')
    op.create_foreign_key(op.f('fantrax_rosters_league_id_fkey'), 'fantrax_rosters', 'fantrax_leagues', ['league_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('ix_fantrax_rosters_positions_gin'), 'fantrax_rosters', ['positions'], unique=False, postgresql_ops={'positions': 'jsonb_path_ops'}, postgresql_using='gin')
    op.drop_constraint(None, 'fantrax_leagues', type_='foreignkey')
    op.create_foreign_key(op.f('fantrax_leagues_user_id_fkey'), 'fantrax_leagues', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('fantrax_leagues', 'my_team_name')
    op.drop_column('fantrax_leagues', 'my_team_id')
    op.drop_constraint(None, 'email_preferences', type_='foreignkey')
    op.create_foreign_key(op.f('email_preferences_user_id_fkey'), 'email_preferences', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('email_preferences_user_id_key'), 'email_preferences', ['user_id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'analytics_events', type_='foreignkey')
    op.create_foreign_key(op.f('analytics_events_user_id_fkey'), 'analytics_events', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.create_table('ml_labels',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('prospect_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('prospect_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('evaluation_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('years_to_evaluate', sa.INTEGER(), server_default=sa.text('4'), autoincrement=False, nullable=True),
    sa.Column('reached_mlb', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('mlb_debut_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('years_to_mlb', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_pa', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_games', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_innings_pitched', sa.NUMERIC(precision=5, scale=1), autoincrement=False, nullable=True),
    sa.Column('peak_war', sa.NUMERIC(precision=3, scale=1), autoincrement=False, nullable=True),
    sa.Column('cumulative_war', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('is_success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('success_tier', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['prospect_id'], ['prospects.id'], name=op.f('ml_labels_prospect_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('ml_labels_pkey')),
    sa.UniqueConstraint('prospect_id', 'prospect_year', 'evaluation_year', name=op.f('ml_labels_prospect_id_prospect_year_evaluation_year_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ml_labels_year'), 'ml_labels', ['prospect_year'], unique=False)
    op.create_index(op.f('idx_ml_labels_success'), 'ml_labels', ['is_success'], unique=False)
    op.create_index(op.f('idx_ml_labels_prospect'), 'ml_labels', ['prospect_id'], unique=False)
    op.create_table('prospect_rankings_v7',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('player_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fv', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('report_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fg_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('v4_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('v5_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('v7_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('v7_rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('prospect_rankings_v7_pkey')),
    sa.UniqueConstraint('mlb_player_id', name=op.f('prospect_rankings_v7_mlb_player_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('fangraphs_mlb_mapping',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fg_player_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mlb_player_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('match_criteria', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('fg_organization', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('fg_position', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('fg_age', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fg_season', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mlb_team', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('fangraphs_mlb_mapping_pkey')),
    sa.UniqueConstraint('fg_player_name', 'fg_season', 'mlb_player_id', name=op.f('fangraphs_mlb_mapping_fg_player_name_fg_season_mlb_player_i_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('milb_statcast_metrics_imputed',
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('avg_ev', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_ev', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hard_hit_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('barrel_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_la', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('statcast_source', sa.VARCHAR(length=20), server_default=sa.text("'imputed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('mlb_player_id', name=op.f('milb_statcast_metrics_imputed_pkey'))
    )
    op.create_table('fangraphs_prospect_grades',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fg_player_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('player_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('organization', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('top_100_rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('org_rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('age', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tj_date', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('fb_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('fb_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sl_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cb_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ch_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cmd_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sits_velo', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tops_velo', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fv', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('import_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('fangraphs_prospect_grades_pkey'))
    )
    op.create_table('mlb_stats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('prospect_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mlb_debut_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('mlb_service_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('games_played', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('plate_appearances', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('at_bats', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('runs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('doubles', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('triples', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('home_runs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rbi', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('walks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strikeouts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stolen_bases', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('caught_stealing', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batting_avg', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('on_base_pct', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('slugging_pct', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('ops', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('ops_plus', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ground_balls', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fly_balls', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('line_drives', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('war', sa.NUMERIC(precision=3, scale=1), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=50), server_default=sa.text("'mlb_api'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['prospect_id'], ['prospects.id'], name=op.f('mlb_stats_prospect_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('mlb_stats_pkey')),
    sa.UniqueConstraint('prospect_id', 'season', name=op.f('mlb_stats_prospect_id_season_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_mlb_stats_season'), 'mlb_stats', ['season'], unique=False)
    op.create_index(op.f('idx_mlb_stats_prospect'), 'mlb_stats', ['prospect_id'], unique=False)
    op.create_table('trending_topics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('topic', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('topic_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mention_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('engagement_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sentiment_average', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('started_trending', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('trending_topics_pkey'))
    )
    op.create_index(op.f('ix_trending_topics_player_id'), 'trending_topics', ['player_id'], unique=False)
    op.create_table('hype_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_hype_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hype_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('sentiment_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('virality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_mentions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('period_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('period_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('granularity', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['player_hype_id'], ['player_hype.id'], name=op.f('hype_history_player_hype_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('hype_history_pkey'))
    )
    op.create_table('fangraphs_unified_grades',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fg_player_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('player_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('organization', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('age', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('top_100_rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('org_rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fv', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hit_present', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hit_future', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('game_power_present', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('game_power_future', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_power_present', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_power_future', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('speed_present', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('speed_future', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('field_present', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('field_future', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bb_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('k_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fb_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sl_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cb_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ch_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ct_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cmd_grade', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sits_velo', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tops_velo', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fb_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('height', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('import_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('source_file', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('frame', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('athleticism', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('levers', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('arm_strength', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('performance', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('delivery', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('has_upside', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('fangraphs_unified_grades_pkey')),
    sa.UniqueConstraint('fg_player_id', 'year', 'data_type', name=op.f('fangraphs_unified_grades_fg_player_id_year_data_type_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('fangraphs_mlb_linkage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fg_player_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('player_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('linkage_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('fangraphs_mlb_linkage_pkey')),
    sa.UniqueConstraint('fg_player_id', 'mlb_player_id', name=op.f('fangraphs_mlb_linkage_fg_player_id_mlb_player_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('prospect_rankings_context_aware',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rank', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('current_age', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('primary_position', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('current_team', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('highest_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('total_milb_pa', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('milb_ops', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pred_wrc_plus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pred_woba', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pred_ops', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('composite_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('context_prospect_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('prospect_rankings_context_aware_pkey')),
    sa.UniqueConstraint('mlb_player_id', name=op.f('prospect_rankings_context_aware_mlb_player_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('media_articles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_hype_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sentiment', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sentiment_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('prominence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('collected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_hype_id'], ['player_hype.id'], name=op.f('media_articles_player_hype_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('media_articles_pkey')),
    sa.UniqueConstraint('url', 'player_hype_id', name=op.f('uq_media_article_player'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('milb_game_logs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('prospect_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('game_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('team', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('opponent', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_home', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('games_played', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('plate_appearances', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('at_bats', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('runs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('doubles', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('triples', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('home_runs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rbi', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('walks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('intentional_walks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strikeouts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stolen_bases', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('caught_stealing', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hit_by_pitch', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sacrifice_flies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sacrifice_hits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batting_avg', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('on_base_pct', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('slugging_pct', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('ops', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('babip', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('ground_outs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('air_outs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fly_outs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ground_into_double_play', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pitches_seen', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('left_on_base', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=50), server_default=sa.text("'mlb_api'::character varying"), autoincrement=False, nullable=True),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('game_pk', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_bases', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ground_into_triple_play', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sac_bunts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_pitches', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('catchers_interference', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stolen_base_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ground_outs_to_airouts', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('at_bats_per_home_run', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('games_started', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('games_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('complete_games', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('shutouts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('games_finished', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('wins', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('losses', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('saves', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('save_opportunities', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('holds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('blown_saves', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('innings_pitched', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('outs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batters_faced', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_pitches_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strikes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hits_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('runs_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('earned_runs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('home_runs_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('walks_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('intentional_walks_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strikeouts_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hit_batsmen', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stolen_bases_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('caught_stealing_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('balks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('wild_pitches', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pickoffs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inherited_runners', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inherited_runners_scored', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fly_outs_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ground_outs_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('air_outs_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ground_into_double_play_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_bases_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sac_bunts_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sac_flies_allowed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('catchers_interference_pitched', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('era', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('whip', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_against', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('obp_against', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('slg_against', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ops_against', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('win_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('strike_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pitches_per_inning', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('strikeout_walk_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('strikeouts_per_9inn', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('walks_per_9inn', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hits_per_9inn', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('runs_scored_per_9', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('home_runs_per_9', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('stolen_base_percentage_against', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ground_outs_to_airouts_pitched', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('opponent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint("(game_type::text = ANY (ARRAY['Regular'::character varying, 'Playoffs'::character varying, 'Spring'::character varying, 'All-Star'::character varying]::text[])) OR game_type IS NULL", name=op.f('valid_game_type')),
    sa.CheckConstraint("level::text = ANY (ARRAY['AAA'::character varying, 'AA'::character varying, 'A+'::character varying, 'A'::character varying, 'Rookie'::character varying, 'Rookie+'::character varying, 'Complex'::character varying, 'Winter'::character varying, 'DSL'::character varying, 'ACL'::character varying, 'FCL'::character varying]::text[])", name=op.f('valid_level')),
    sa.ForeignKeyConstraint(['prospect_id'], ['prospects.id'], name=op.f('milb_game_logs_prospect_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_game_logs_pkey')),
    sa.UniqueConstraint('game_pk', 'mlb_player_id', name=op.f('uq_milb_game_logs_game_player'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_milb_logs_season_level'), 'milb_game_logs', ['season', 'level'], unique=False)
    op.create_index(op.f('idx_milb_logs_prospect_season'), 'milb_game_logs', ['prospect_id', 'season', 'level'], unique=False)
    op.create_index(op.f('idx_milb_logs_prospect_id'), 'milb_game_logs', ['prospect_id'], unique=False)
    op.create_index(op.f('idx_milb_logs_prospect_date'), 'milb_game_logs', ['prospect_id', sa.literal_column('game_date DESC')], unique=False)
    op.create_index(op.f('idx_milb_logs_date'), 'milb_game_logs', ['game_date'], unique=False)
    op.create_index(op.f('idx_milb_game_logs_mlb_player'), 'milb_game_logs', ['mlb_player_id'], unique=False)
    op.create_index(op.f('idx_milb_game_logs_game_pk'), 'milb_game_logs', ['game_pk'], unique=False)
    op.create_table('player_id_mapping',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('mlb_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fg_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('mlbam_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retrosheet_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('bbref_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('bbref_minors_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('espn_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('yahoo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ottoneu_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rotowire_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ftrax_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('cbs_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nfbc_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('player_id_mapping_pkey')),
    sa.UniqueConstraint('mlb_id', 'fg_id', name=op.f('player_id_mapping_mlb_id_fg_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('milb_advanced_stats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('prospect_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('wrc', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('wraa', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('woba', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('wrc_plus', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('iso', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('gb_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('fb_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('ld_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('iffb_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('hr_per_fb', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('pull_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('oppo_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('cent_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('swing_strike_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('contact_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('zone_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('o_swing_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('z_swing_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('speed_score', sa.NUMERIC(precision=3, scale=1), autoincrement=False, nullable=True),
    sa.Column('wbsr', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('hard_contact_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('soft_contact_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('medium_contact_percent', sa.NUMERIC(precision=4, scale=1), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=50), server_default=sa.text("'fangraphs'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['prospect_id'], ['prospects.id'], name=op.f('milb_advanced_stats_prospect_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_advanced_stats_pkey')),
    sa.UniqueConstraint('prospect_id', 'season', 'level', name=op.f('milb_advanced_stats_prospect_id_season_level_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_milb_advanced_season'), 'milb_advanced_stats', ['season', 'level'], unique=False)
    op.create_index(op.f('idx_milb_advanced_prospect'), 'milb_advanced_stats', ['prospect_id'], unique=False)
    op.create_table('search_trends',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_hype_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('search_interest', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('search_interest_avg_7d', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=True),
    sa.Column('search_interest_avg_30d', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=True),
    sa.Column('search_growth_rate', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=True),
    sa.Column('region', sa.VARCHAR(), server_default=sa.text("'US'::character varying"), autoincrement=False, nullable=True),
    sa.Column('regional_interest', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('related_queries', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rising_queries', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('collected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_period_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_period_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_hype_id'], ['player_hype.id'], name=op.f('search_trends_player_hype_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('search_trends_pkey'))
    )
    op.create_index(op.f('ix_search_trends_id'), 'search_trends', ['id'], unique=False)
    op.create_table('milb_league_factors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('total_pa', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unique_players', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('players_with_age', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lg_avg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_obp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_slg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_ops', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_iso', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_hr_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_bb_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_so_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_sb_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_sb_success_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_avg_age', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_median_age', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_age_std', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_age_25th_percentile', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lg_age_75th_percentile', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_league_factors_pkey')),
    sa.UniqueConstraint('season', 'level', name=op.f('milb_league_factors_season_level_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_league_factors_season_level'), 'milb_league_factors', ['season', 'level'], unique=False)
    op.create_table('hype_alerts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('hype_score_before', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hype_score_after', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('change_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('acknowledged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('acknowledged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('hype_alerts_pkey'))
    )
    op.create_index(op.f('ix_hype_alerts_player_id'), 'hype_alerts', ['player_id'], unique=False)
    op.create_table('mlb_game_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_pk', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('game_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('opponent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_home', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_win', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('games_played', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('plate_appearances', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('at_bats', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('runs', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('hits', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('doubles', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('triples', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('home_runs', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('rbi', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('walks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('intentional_walks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('strikeouts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('stolen_bases', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('caught_stealing', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('hit_by_pitch', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('sacrifice_flies', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('sacrifice_hits', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('ground_outs', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('fly_outs', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('grounded_into_double_play', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_bases', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('left_on_base', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('batting_avg', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=True),
    sa.Column('on_base_pct', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=True),
    sa.Column('slugging_pct', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=True),
    sa.Column('ops', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('mlb_game_logs_pkey')),
    sa.UniqueConstraint('game_pk', 'mlb_player_id', name=op.f('mlb_game_logs_game_pk_mlb_player_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_mlb_logs_season'), 'mlb_game_logs', ['season'], unique=False)
    op.create_index(op.f('idx_mlb_logs_player'), 'mlb_game_logs', ['mlb_player_id'], unique=False)
    op.create_index(op.f('idx_mlb_logs_date'), 'mlb_game_logs', ['game_date'], unique=False)
    op.create_table('milb_statcast_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('batted_balls', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('avg_ev', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_ev', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ev_90th', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hard_hit_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_la', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_la_hard', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fb_ev', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('barrel_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gb_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ld_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fb_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pu_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_distance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_distance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_statcast_metrics_pkey')),
    sa.UniqueConstraint('mlb_player_id', 'season', 'level', name=op.f('milb_statcast_metrics_mlb_player_id_season_level_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_statcast_metrics_player'), 'milb_statcast_metrics', ['mlb_player_id'], unique=False)
    op.create_table('milb_players',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('team_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_players_pkey')),
    sa.UniqueConstraint('mlb_player_id', name=op.f('milb_players_mlb_player_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('mlb_statcast_hitting',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('sv_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('pitch_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('release_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('events', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('zone', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('stand', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('p_throws', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('home_team', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('away_team', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('type', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('hit_location', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('bb_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('balls', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('strikes', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('plate_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plate_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hc_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hc_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_angle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hit_distance_sc', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('estimated_ba_using_speedangle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('estimated_woba_using_speedangle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('woba_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_speed_angle', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('mlb_statcast_hitting_pkey')),
    sa.UniqueConstraint('sv_id', name=op.f('mlb_statcast_hitting_sv_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_mlb_statcast_hitting_player'), 'mlb_statcast_hitting', ['mlb_player_id', 'season'], unique=False)
    op.create_index(op.f('idx_mlb_statcast_hitting_date'), 'mlb_statcast_hitting', ['game_date'], unique=False)
    op.create_table('social_mentions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_hype_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('platform', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author_handle', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('author_followers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('media_urls', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('hashtags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('shares', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('views', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sentiment', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sentiment_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('keywords', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('posted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('collected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_hype_id'], ['player_hype.id'], name=op.f('social_mentions_player_hype_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('social_mentions_pkey')),
    sa.UniqueConstraint('post_id', 'player_hype_id', name=op.f('uq_social_mention_player'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('player_hype',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('player_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('player_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hype_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hype_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('virality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_mentions_24h', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_mentions_7d', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_mentions_30d', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_likes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_shares', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('engagement_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_calculated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('total_mentions_14d', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('player_hype_pkey'))
    )
    op.create_index(op.f('ix_player_hype_player_id'), 'player_hype', ['player_id'], unique=False)
    op.create_table('milb_pitcher_pitches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_pitcher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mlb_batter_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_pk', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('game_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('at_bat_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pitch_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inning', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('half_inning', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('pitch_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('pitch_type_description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('start_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('end_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pfx_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pfx_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_extension', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('spin_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('spin_direction', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plate_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plate_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zone', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pitch_call', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('pitch_result', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_strike', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('balls', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strikes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('outs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('swing', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('contact', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('swing_and_miss', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('foul', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_final_pitch', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('pa_result', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('pa_result_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('launch_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_angle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_distance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trajectory', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('hardness', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_pitcher_pitches_pkey')),
    sa.UniqueConstraint('mlb_pitcher_id', 'game_pk', 'at_bat_index', 'pitch_number', name=op.f('milb_pitcher_pitches_mlb_pitcher_id_game_pk_at_bat_index_pi_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_pitcher_pitches_velocity'), 'milb_pitcher_pitches', ['start_speed'], unique=False, postgresql_where='(start_speed IS NOT NULL)')
    op.create_index(op.f('idx_pitcher_pitches_type'), 'milb_pitcher_pitches', ['pitch_type'], unique=False, postgresql_where='(pitch_type IS NOT NULL)')
    op.create_index(op.f('idx_pitcher_pitches_season'), 'milb_pitcher_pitches', ['season'], unique=False)
    op.create_index(op.f('idx_pitcher_pitches_pitcher_season'), 'milb_pitcher_pitches', ['mlb_pitcher_id', 'season'], unique=False)
    op.create_index(op.f('idx_pitcher_pitches_pitcher'), 'milb_pitcher_pitches', ['mlb_pitcher_id'], unique=False)
    op.create_index(op.f('idx_pitcher_pitches_launch'), 'milb_pitcher_pitches', ['launch_speed', 'launch_angle'], unique=False, postgresql_where='(launch_speed IS NOT NULL)')
    op.create_index(op.f('idx_pitcher_pitches_game'), 'milb_pitcher_pitches', ['game_pk'], unique=False)
    op.create_table('milb_plate_appearances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_pk', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('game_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('at_bat_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inning', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('half_inning', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('event_type_desc', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('launch_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_angle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_distance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trajectory', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('hardness', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('location', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('coord_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('coord_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_plate_appearances_pkey')),
    sa.UniqueConstraint('mlb_player_id', 'game_pk', 'at_bat_index', name=op.f('milb_plate_appearances_mlb_player_id_game_pk_at_bat_index_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_milb_pa_player'), 'milb_plate_appearances', ['mlb_player_id'], unique=False)
    op.create_index(op.f('idx_milb_pa_launch_speed'), 'milb_plate_appearances', ['launch_speed'], unique=False, postgresql_where='(launch_speed IS NOT NULL)')
    op.create_table('mlb_statcast_pitching',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('sv_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('pitch_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('pitch_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('release_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_spin_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_extension', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('events', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('zone', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('stand', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('p_throws', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('home_team', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('away_team', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('type', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('balls', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('strikes', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('pfx_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pfx_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plate_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plate_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('vx0', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('vy0', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('vz0', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ax', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ay', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('az', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sz_top', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sz_bot', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('effective_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('spin_axis', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_angle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hit_distance_sc', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('estimated_woba_using_speedangle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('woba_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('mlb_statcast_pitching_pkey')),
    sa.UniqueConstraint('sv_id', name=op.f('mlb_statcast_pitching_sv_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_mlb_statcast_pitching_player'), 'mlb_statcast_pitching', ['mlb_player_id', 'season'], unique=False)
    op.create_index(op.f('idx_mlb_statcast_pitching_date'), 'mlb_statcast_pitching', ['game_date'], unique=False)
    op.create_table('ml_features',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('prospect_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('feature_set_version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('as_of_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bio_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('scouting_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('milb_performance', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('milb_progression', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('milb_consistency', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('derived_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('feature_vector', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['prospect_id'], ['prospects.id'], name=op.f('ml_features_prospect_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('ml_features_pkey')),
    sa.UniqueConstraint('prospect_id', 'as_of_year', 'feature_set_version', name=op.f('ml_features_prospect_id_as_of_year_feature_set_version_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ml_features_year'), 'ml_features', ['as_of_year'], unique=False)
    op.create_index(op.f('idx_ml_features_version'), 'ml_features', ['feature_set_version'], unique=False)
    op.create_index(op.f('idx_ml_features_vector'), 'ml_features', ['feature_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_ml_features_prospect'), 'ml_features', ['prospect_id'], unique=False)
    op.create_table('milb_batter_pitches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mlb_batter_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mlb_pitcher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_pk', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('game_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('at_bat_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pitch_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inning', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('half_inning', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('pitch_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('pitch_type_description', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('start_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('end_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pfx_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pfx_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_pos_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('release_extension', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('spin_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('spin_direction', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plate_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plate_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zone', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pitch_call', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('pitch_result', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_strike', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('balls', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strikes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('outs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('swing', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('contact', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('swing_and_miss', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('foul', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_final_pitch', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('pa_result', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('pa_result_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('launch_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('launch_angle', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_distance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trajectory', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('hardness', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('hit_location', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('coord_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('coord_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_batter_pitches_pkey')),
    sa.UniqueConstraint('mlb_batter_id', 'game_pk', 'at_bat_index', 'pitch_number', name=op.f('milb_batter_pitches_mlb_batter_id_game_pk_at_bat_index_pitc_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_batter_pitches_velocity'), 'milb_batter_pitches', ['start_speed'], unique=False, postgresql_where='(start_speed IS NOT NULL)')
    op.create_index(op.f('idx_batter_pitches_type'), 'milb_batter_pitches', ['pitch_type'], unique=False, postgresql_where='(pitch_type IS NOT NULL)')
    op.create_index(op.f('idx_batter_pitches_season'), 'milb_batter_pitches', ['season'], unique=False)
    op.create_index(op.f('idx_batter_pitches_launch'), 'milb_batter_pitches', ['launch_speed', 'launch_angle'], unique=False, postgresql_where='(launch_speed IS NOT NULL)')
    op.create_index(op.f('idx_batter_pitches_game'), 'milb_batter_pitches', ['game_pk'], unique=False)
    op.create_index(op.f('idx_batter_pitches_batter_season'), 'milb_batter_pitches', ['mlb_batter_id', 'season'], unique=False)
    op.create_index(op.f('idx_batter_pitches_batter'), 'milb_batter_pitches', ['mlb_batter_id'], unique=False)
    op.create_table('milb_position_factors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('position_group', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('total_pa', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unique_players', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pos_avg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_obp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_slg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_ops', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_iso', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_hr_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_bb_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_so_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_sb_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_avg_age', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('milb_position_factors_pkey')),
    sa.UniqueConstraint('season', 'level', 'position_group', name=op.f('milb_position_factors_season_level_position_group_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_position_factors_season_level_pos'), 'milb_position_factors', ['season', 'level', 'position_group'], unique=False)
    op.drop_index(op.f('ix_user_search_history_id'), table_name='user_search_history')
    op.drop_table('user_search_history')
    op.drop_index(op.f('ix_user_saved_searches_id'), table_name='user_saved_searches')
    op.drop_table('user_saved_searches')
    op.drop_index(op.f('ix_user_push_subscriptions_id'), table_name='user_push_subscriptions')
    op.drop_table('user_push_subscriptions')
    op.drop_index(op.f('ix_user_prospect_views_id'), table_name='user_prospect_views')
    op.drop_table('user_prospect_views')
    # ### end Alembic commands ###