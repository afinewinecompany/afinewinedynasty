"""
Database models for user engagement features.

This module contains Pydantic models for achievements, referrals, feedback,
analytics events, and email preferences.

@module engagement
@since 1.0.0
"""

from datetime import datetime
from typing import Optional, Dict, Any
from pydantic import BaseModel


class Achievement(BaseModel):
    """
    Represents an achievement that users can unlock.

    @since 1.0.0
    """
    id: int
    name: str
    description: str
    criteria: str
    icon: str
    points: int


class UserAchievement(BaseModel):
    """
    Represents a user's unlocked achievement.

    @since 1.0.0
    """
    id: int
    user_id: int
    achievement_id: int
    unlocked_at: datetime


class ReferralCode(BaseModel):
    """
    Represents a referral code generated by a user.

    @since 1.0.0
    """
    id: int
    user_id: int
    code: str
    uses_remaining: int
    created_at: datetime


class Referral(BaseModel):
    """
    Represents a referral relationship between users.

    @since 1.0.0
    """
    id: int
    referrer_id: int
    referred_user_id: int
    status: str  # pending, active, completed
    reward_granted: bool
    created_at: datetime


class Feedback(BaseModel):
    """
    Represents user feedback submission.

    @since 1.0.0
    """
    id: int
    user_id: int
    type: str  # bug, feature_request, general, nps
    rating: Optional[int] = None
    message: Optional[str] = None
    feature_request: Optional[str] = None
    submitted_at: datetime


class AnalyticsEvent(BaseModel):
    """
    Represents an analytics event tracked in the system.

    @since 1.0.0
    """
    id: int
    user_id: Optional[int] = None
    event_name: str
    event_data: Optional[Dict[str, Any]] = None
    timestamp: datetime


class UserEngagementMetrics(BaseModel):
    """
    Represents aggregated engagement metrics for a user.

    @since 1.0.0
    """
    id: int
    user_id: int
    last_login: Optional[datetime] = None
    login_frequency: int
    feature_usage_score: float
    churn_risk_score: float
    updated_at: datetime


class EmailPreferences(BaseModel):
    """
    Represents email preference settings for a user.

    @since 1.0.0
    """
    id: int
    user_id: int
    digest_enabled: bool
    frequency: str  # daily, weekly, monthly
    last_sent: Optional[datetime] = None
    preferences: Dict[str, Any]
    created_at: datetime
    updated_at: datetime
