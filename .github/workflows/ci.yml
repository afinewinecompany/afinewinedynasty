name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing and Build
  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/web/package-lock.json'

    - name: Install dependencies
      working-directory: ./apps/web
      run: npm ci

    - name: Run linting
      working-directory: ./apps/web
      run: npm run lint

    - name: Run type checking
      working-directory: ./apps/web
      run: npx tsc --noEmit

    - name: Build application
      working-directory: ./apps/web
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: apps/web/.next

  # Backend Testing and Build
  backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_afinewinedynasty
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      working-directory: ./apps/api
      run: |
        pip install black flake8 mypy
        black --check .
        flake8 .
        mypy app/

    - name: Run tests
      working-directory: ./apps/api
      env:
        POSTGRES_SERVER: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: test_afinewinedynasty
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pip install pytest pytest-asyncio httpx
        pytest

  # Docker Build and Security Scan
  docker:
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./apps/web
        file: ./apps/web/Dockerfile
        push: false
        tags: afwd-web:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Backend Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./apps/api
        file: ./apps/api/Dockerfile
        push: false
        tags: afwd-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Docker Compose Health Check
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        curl -f http://localhost:8000/health || exit 1
        docker-compose down

  # Security Scanning
  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'