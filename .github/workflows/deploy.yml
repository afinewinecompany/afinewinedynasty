name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./apps/web
        file: ./apps/web/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./apps/api
        file: ./apps/api/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging environment
      run: |
        echo "Deployment would happen here"
        echo "Frontend image: ${{ steps.meta-web.outputs.tags }}"
        echo "Backend image: ${{ steps.meta-api.outputs.tags }}"
        # Add actual deployment logic here (e.g., deploy to cloud provider)

  health-check:
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Health check staging
      run: |
        echo "Performing health checks..."
        # Add actual health check logic here
        # Example: curl -f https://staging.afinewinedynasty.com/health